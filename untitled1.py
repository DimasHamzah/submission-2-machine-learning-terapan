# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v0OV4RWXpJFfrMhIqsaXZ0hWvVx0ufas

import library pandas dan import dataset
"""

import pandas as pd 

data = pd.read_csv('vgsales.csv')
data = data.drop(columns=['Year', 'NA_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales', 'EU_Sales', 'Platform', 'Publisher'], axis=1)
data.head()

"""cek length dataset"""

print(len(data))

"""univariate exploratory data analysis

cek informasi dataset
"""

data.info()

"""# cek missing value """

data.isnull().sum()

"""# membersihkan missing value dengan fungsi dropna"""

data_clean = data.dropna()
data_clean

"""cek ulang missing value pada variable data_clean"""

data_clean.isnull().sum()

"""cek length rank"""

len(data_clean['Rank'])

"""cek data name"""

data_clean.Name.unique()

"""cek data genre"""

data_clean.Genre.unique()

"""# membuang data duplicat pada variabel"""

preparation = data_clean.drop_duplicates('Rank')
preparation

"""data preparation"""

data_game = preparation
data_game.sample(5)

"""import librari tfidfvectorizer digunakan untuk sistem recomendasi berdasarkan genre"""

from sklearn.feature_extraction.text import TfidfVectorizer

# inisalisasi tfidvectorizer
tf = TfidfVectorizer()

# melakukan perhitungan idf pada data cuisine
tf.fit(data_game['Genre'])

# mapping array dari fitur index integer ke fitur name
tf.get_feature_names()

"""# malakukan fit lalu di transformasi ke bentuk matrix"""

tfidf_matrix = tf.fit_transform(data_game['Genre'])

tfidf_matrix.shape

"""mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense() Untuk menghasilkan vektor tf-idf dalam bentuk matriks"""

tfidf_matrix.todense()

"""# Membuat dataframe untuk melihat tf-idf matrix
# Kolom diisi dengan genre
# Baris diisi dengan nama game
"""

pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names(),
    index=data_game.Name
).sample(22, axis=0)

"""tahapan cosine similarity untuk menghitung drajat kesamaan"""

from sklearn.metrics.pairwise import cosine_similarity


cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

"""Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa nama resto"""

cosine_sim_df = pd.DataFrame(cosine_sim, index=data_game['Name'], columns=data_game['Name'])
print('Shape: ', cosine_sim_df.shape)

cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

"""membuat fungsi untuk mendapatkan recomendasi"""

import numpy as np

def game_recommendations(nama_game, similarity_data=cosine_sim_df, items=data_game[['Name', 'Genre']], k=15):

    index = similarity_data.loc[:,nama_game].to_numpy().argpartition(
        range(-1, -k, -1))
    
    # Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]
    
    # Drop nama_resto agar nama resto yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(nama_game, errors='ignore')
 
    return pd.DataFrame(closest).merge(items).head(k)

"""cek data """

data_game[data_game.Name.eq('Spirits & Spells')]

"""cek info dataset"""

data_game.info()

"""menggunakan fungsi untuk melihat recomendasi"""

game_recommendations('Mario Kart Wii')